(define (length l) (if (isNull? l) 0 (+ 1 (length (cdr l)))))
(define (first l) (car l))
(define (second l) (car (cdr l)))
(define (third l) (car (cdr (cdr l))))
(define (nth l n) (if (= n 0) (car l) (nth (cdr l) (- n 1))))

(define (last l)
  (cond ((isNull? l) ())
	((isNull? (cdr l)) (car l))
	(#t (last (cdr l)))))

(define (append l a)
  (cond ((isNull? a) l)
        ((isNull? l) (cons a ()))
        (#t (cons (car l) (append (cdr l) a)))))

(define (remove l pred)
  (cond ((isNull? l) l)
  		((pred (car l)) (remove (cdr l) pred))
  		(#t (cons (car l) (remove (cdr l) pred)))))